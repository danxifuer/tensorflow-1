// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/examples/android/proto/box_coder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/examples/android/proto/box_coder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org_tensorflow_demo {
class BoxCoderPriorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BoxCoderPrior> {};
BoxCoderPriorDefaultTypeInternal _BoxCoderPrior_default_instance_;
class BoxCoderOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BoxCoderOptions> {};
BoxCoderOptionsDefaultTypeInternal _BoxCoderOptions_default_instance_;
class MultiBoxCoderOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MultiBoxCoderOptions> {};
MultiBoxCoderOptionsDefaultTypeInternal _MultiBoxCoderOptions_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxCoderPrior, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxCoderPrior, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxCoderPrior, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxCoderPrior, stddev_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxCoderOptions, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxCoderOptions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxCoderOptions, priors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxCoderOptions, use_corners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxCoderOptions, use_width_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxCoderOptions, use_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxCoderOptions, use_area_),
    4,
    3,
    0,
    1,
    2,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBoxCoderOptions, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBoxCoderOptions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiBoxCoderOptions, box_coder_),
    0,
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(BoxCoderPrior)},
  { 8, 17, sizeof(BoxCoderOptions)},
  { 22, 27, sizeof(MultiBoxCoderOptions)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_BoxCoderPrior_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_BoxCoderOptions_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_MultiBoxCoderOptions_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/examples/android/proto/box_coder.proto", schemas, file_default_instances, protobuf_Offsets_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto() {
  _BoxCoderPrior_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BoxCoderOptions_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MultiBoxCoderOptions_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void protobuf_InitDefaults_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BoxCoderPrior_default_instance_.DefaultConstruct();
  _BoxCoderOptions_default_instance_.DefaultConstruct();
  _MultiBoxCoderOptions_default_instance_.DefaultConstruct();
}

void protobuf_InitDefaults_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto_impl() {
  protobuf_InitDefaults_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto();
  static const char descriptor[] = {
      "\n1tensorflow/examples/android/proto/box_"
      "coder.proto\022\023org_tensorflow_demo\"3\n\rBoxC"
      "oderPrior\022\017\n\004mean\030\001 \001(\002:\0010\022\021\n\006stddev\030\002 \001"
      "(\002:\0011\"\265\001\n\017BoxCoderOptions\0222\n\006priors\030\001 \003("
      "\0132\".org_tensorflow_demo.BoxCoderPrior\022\031\n"
      "\013use_corners\030\002 \001(\010:\004true\022\037\n\020use_width_he"
      "ight\030\003 \001(\010:\005false\022\031\n\nuse_center\030\004 \001(\010:\005f"
      "alse\022\027\n\010use_area\030\005 \001(\010:\005false\"O\n\024MultiBo"
      "xCoderOptions\0227\n\tbox_coder\030\001 \003(\0132$.org_t"
      "ensorflow_demo.BoxCoderOptions"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 390);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/examples/android/proto/box_coder.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto {
  StaticDescriptorInitializer_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto() {
    protobuf_AddDesc_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoxCoderPrior::kMeanFieldNumber;
const int BoxCoderPrior::kStddevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoxCoderPrior::BoxCoderPrior()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org_tensorflow_demo.BoxCoderPrior)
}
BoxCoderPrior::BoxCoderPrior(const BoxCoderPrior& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mean_, &from.mean_,
    reinterpret_cast<char*>(&stddev_) -
    reinterpret_cast<char*>(&mean_) + sizeof(stddev_));
  // @@protoc_insertion_point(copy_constructor:org_tensorflow_demo.BoxCoderPrior)
}

void BoxCoderPrior::SharedCtor() {
  _cached_size_ = 0;
  mean_ = 0;
  stddev_ = 1;
}

BoxCoderPrior::~BoxCoderPrior() {
  // @@protoc_insertion_point(destructor:org_tensorflow_demo.BoxCoderPrior)
  SharedDtor();
}

void BoxCoderPrior::SharedDtor() {
}

void BoxCoderPrior::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxCoderPrior::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const BoxCoderPrior& BoxCoderPrior::default_instance() {
  protobuf_InitDefaults_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto();
  return *internal_default_instance();
}

BoxCoderPrior* BoxCoderPrior::New(::google::protobuf::Arena* arena) const {
  BoxCoderPrior* n = new BoxCoderPrior;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoxCoderPrior::Clear() {
// @@protoc_insertion_point(message_clear_start:org_tensorflow_demo.BoxCoderPrior)
  if (_has_bits_[0 / 32] & 3u) {
    mean_ = 0;
    stddev_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoxCoderPrior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org_tensorflow_demo.BoxCoderPrior)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float mean = 1 [default = 0];
      case 1: {
        if (tag == 13u) {
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stddev = 2 [default = 1];
      case 2: {
        if (tag == 21u) {
          set_has_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org_tensorflow_demo.BoxCoderPrior)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org_tensorflow_demo.BoxCoderPrior)
  return false;
#undef DO_
}

void BoxCoderPrior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org_tensorflow_demo.BoxCoderPrior)
  // optional float mean = 1 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->mean(), output);
  }

  // optional float stddev = 2 [default = 1];
  if (has_stddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->stddev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org_tensorflow_demo.BoxCoderPrior)
}

::google::protobuf::uint8* BoxCoderPrior::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org_tensorflow_demo.BoxCoderPrior)
  // optional float mean = 1 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->mean(), target);
  }

  // optional float stddev = 2 [default = 1];
  if (has_stddev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->stddev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org_tensorflow_demo.BoxCoderPrior)
  return target;
}

size_t BoxCoderPrior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org_tensorflow_demo.BoxCoderPrior)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float mean = 1 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float stddev = 2 [default = 1];
    if (has_stddev()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxCoderPrior::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org_tensorflow_demo.BoxCoderPrior)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxCoderPrior* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoxCoderPrior>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org_tensorflow_demo.BoxCoderPrior)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org_tensorflow_demo.BoxCoderPrior)
    MergeFrom(*source);
  }
}

void BoxCoderPrior::MergeFrom(const BoxCoderPrior& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org_tensorflow_demo.BoxCoderPrior)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_stddev()) {
      set_stddev(from.stddev());
    }
  }
}

void BoxCoderPrior::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org_tensorflow_demo.BoxCoderPrior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxCoderPrior::CopyFrom(const BoxCoderPrior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org_tensorflow_demo.BoxCoderPrior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxCoderPrior::IsInitialized() const {
  return true;
}

void BoxCoderPrior::Swap(BoxCoderPrior* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoxCoderPrior::InternalSwap(BoxCoderPrior* other) {
  std::swap(mean_, other->mean_);
  std::swap(stddev_, other->stddev_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoxCoderPrior::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoxCoderPrior

// optional float mean = 1 [default = 0];
bool BoxCoderPrior::has_mean() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BoxCoderPrior::set_has_mean() {
  _has_bits_[0] |= 0x00000001u;
}
void BoxCoderPrior::clear_has_mean() {
  _has_bits_[0] &= ~0x00000001u;
}
void BoxCoderPrior::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
float BoxCoderPrior::mean() const {
  // @@protoc_insertion_point(field_get:org_tensorflow_demo.BoxCoderPrior.mean)
  return mean_;
}
void BoxCoderPrior::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:org_tensorflow_demo.BoxCoderPrior.mean)
}

// optional float stddev = 2 [default = 1];
bool BoxCoderPrior::has_stddev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BoxCoderPrior::set_has_stddev() {
  _has_bits_[0] |= 0x00000002u;
}
void BoxCoderPrior::clear_has_stddev() {
  _has_bits_[0] &= ~0x00000002u;
}
void BoxCoderPrior::clear_stddev() {
  stddev_ = 1;
  clear_has_stddev();
}
float BoxCoderPrior::stddev() const {
  // @@protoc_insertion_point(field_get:org_tensorflow_demo.BoxCoderPrior.stddev)
  return stddev_;
}
void BoxCoderPrior::set_stddev(float value) {
  set_has_stddev();
  stddev_ = value;
  // @@protoc_insertion_point(field_set:org_tensorflow_demo.BoxCoderPrior.stddev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoxCoderOptions::kPriorsFieldNumber;
const int BoxCoderOptions::kUseCornersFieldNumber;
const int BoxCoderOptions::kUseWidthHeightFieldNumber;
const int BoxCoderOptions::kUseCenterFieldNumber;
const int BoxCoderOptions::kUseAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoxCoderOptions::BoxCoderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org_tensorflow_demo.BoxCoderOptions)
}
BoxCoderOptions::BoxCoderOptions(const BoxCoderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      priors_(from.priors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_width_height_, &from.use_width_height_,
    reinterpret_cast<char*>(&use_corners_) -
    reinterpret_cast<char*>(&use_width_height_) + sizeof(use_corners_));
  // @@protoc_insertion_point(copy_constructor:org_tensorflow_demo.BoxCoderOptions)
}

void BoxCoderOptions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&use_width_height_, 0, reinterpret_cast<char*>(&use_area_) -
    reinterpret_cast<char*>(&use_width_height_) + sizeof(use_area_));
  use_corners_ = true;
}

BoxCoderOptions::~BoxCoderOptions() {
  // @@protoc_insertion_point(destructor:org_tensorflow_demo.BoxCoderOptions)
  SharedDtor();
}

void BoxCoderOptions::SharedDtor() {
}

void BoxCoderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxCoderOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const BoxCoderOptions& BoxCoderOptions::default_instance() {
  protobuf_InitDefaults_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto();
  return *internal_default_instance();
}

BoxCoderOptions* BoxCoderOptions::New(::google::protobuf::Arena* arena) const {
  BoxCoderOptions* n = new BoxCoderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoxCoderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:org_tensorflow_demo.BoxCoderOptions)
  priors_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&use_width_height_, 0, reinterpret_cast<char*>(&use_area_) -
      reinterpret_cast<char*>(&use_width_height_) + sizeof(use_area_));
    use_corners_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoxCoderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org_tensorflow_demo.BoxCoderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org_tensorflow_demo.BoxCoderPrior priors = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_priors()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional bool use_corners = 2 [default = true];
      case 2: {
        if (tag == 16u) {
          set_has_use_corners();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_corners_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_width_height = 3 [default = false];
      case 3: {
        if (tag == 24u) {
          set_has_use_width_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_width_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_center = 4 [default = false];
      case 4: {
        if (tag == 32u) {
          set_has_use_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_area = 5 [default = false];
      case 5: {
        if (tag == 40u) {
          set_has_use_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org_tensorflow_demo.BoxCoderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org_tensorflow_demo.BoxCoderOptions)
  return false;
#undef DO_
}

void BoxCoderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org_tensorflow_demo.BoxCoderOptions)
  // repeated .org_tensorflow_demo.BoxCoderPrior priors = 1;
  for (unsigned int i = 0, n = this->priors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->priors(i), output);
  }

  // optional bool use_corners = 2 [default = true];
  if (has_use_corners()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_corners(), output);
  }

  // optional bool use_width_height = 3 [default = false];
  if (has_use_width_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_width_height(), output);
  }

  // optional bool use_center = 4 [default = false];
  if (has_use_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_center(), output);
  }

  // optional bool use_area = 5 [default = false];
  if (has_use_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_area(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org_tensorflow_demo.BoxCoderOptions)
}

::google::protobuf::uint8* BoxCoderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org_tensorflow_demo.BoxCoderOptions)
  // repeated .org_tensorflow_demo.BoxCoderPrior priors = 1;
  for (unsigned int i = 0, n = this->priors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->priors(i), false, target);
  }

  // optional bool use_corners = 2 [default = true];
  if (has_use_corners()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_corners(), target);
  }

  // optional bool use_width_height = 3 [default = false];
  if (has_use_width_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_width_height(), target);
  }

  // optional bool use_center = 4 [default = false];
  if (has_use_center()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_center(), target);
  }

  // optional bool use_area = 5 [default = false];
  if (has_use_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_area(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org_tensorflow_demo.BoxCoderOptions)
  return target;
}

size_t BoxCoderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org_tensorflow_demo.BoxCoderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .org_tensorflow_demo.BoxCoderPrior priors = 1;
  {
    unsigned int count = this->priors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priors(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional bool use_width_height = 3 [default = false];
    if (has_use_width_height()) {
      total_size += 1 + 1;
    }

    // optional bool use_center = 4 [default = false];
    if (has_use_center()) {
      total_size += 1 + 1;
    }

    // optional bool use_area = 5 [default = false];
    if (has_use_area()) {
      total_size += 1 + 1;
    }

    // optional bool use_corners = 2 [default = true];
    if (has_use_corners()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxCoderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org_tensorflow_demo.BoxCoderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxCoderOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoxCoderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org_tensorflow_demo.BoxCoderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org_tensorflow_demo.BoxCoderOptions)
    MergeFrom(*source);
  }
}

void BoxCoderOptions::MergeFrom(const BoxCoderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org_tensorflow_demo.BoxCoderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  priors_.MergeFrom(from.priors_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_use_width_height()) {
      set_use_width_height(from.use_width_height());
    }
    if (from.has_use_center()) {
      set_use_center(from.use_center());
    }
    if (from.has_use_area()) {
      set_use_area(from.use_area());
    }
    if (from.has_use_corners()) {
      set_use_corners(from.use_corners());
    }
  }
}

void BoxCoderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org_tensorflow_demo.BoxCoderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxCoderOptions::CopyFrom(const BoxCoderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org_tensorflow_demo.BoxCoderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxCoderOptions::IsInitialized() const {
  return true;
}

void BoxCoderOptions::Swap(BoxCoderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoxCoderOptions::InternalSwap(BoxCoderOptions* other) {
  priors_.UnsafeArenaSwap(&other->priors_);
  std::swap(use_width_height_, other->use_width_height_);
  std::swap(use_center_, other->use_center_);
  std::swap(use_area_, other->use_area_);
  std::swap(use_corners_, other->use_corners_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoxCoderOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoxCoderOptions

// repeated .org_tensorflow_demo.BoxCoderPrior priors = 1;
int BoxCoderOptions::priors_size() const {
  return priors_.size();
}
void BoxCoderOptions::clear_priors() {
  priors_.Clear();
}
const ::org_tensorflow_demo::BoxCoderPrior& BoxCoderOptions::priors(int index) const {
  // @@protoc_insertion_point(field_get:org_tensorflow_demo.BoxCoderOptions.priors)
  return priors_.Get(index);
}
::org_tensorflow_demo::BoxCoderPrior* BoxCoderOptions::mutable_priors(int index) {
  // @@protoc_insertion_point(field_mutable:org_tensorflow_demo.BoxCoderOptions.priors)
  return priors_.Mutable(index);
}
::org_tensorflow_demo::BoxCoderPrior* BoxCoderOptions::add_priors() {
  // @@protoc_insertion_point(field_add:org_tensorflow_demo.BoxCoderOptions.priors)
  return priors_.Add();
}
::google::protobuf::RepeatedPtrField< ::org_tensorflow_demo::BoxCoderPrior >*
BoxCoderOptions::mutable_priors() {
  // @@protoc_insertion_point(field_mutable_list:org_tensorflow_demo.BoxCoderOptions.priors)
  return &priors_;
}
const ::google::protobuf::RepeatedPtrField< ::org_tensorflow_demo::BoxCoderPrior >&
BoxCoderOptions::priors() const {
  // @@protoc_insertion_point(field_list:org_tensorflow_demo.BoxCoderOptions.priors)
  return priors_;
}

// optional bool use_corners = 2 [default = true];
bool BoxCoderOptions::has_use_corners() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BoxCoderOptions::set_has_use_corners() {
  _has_bits_[0] |= 0x00000008u;
}
void BoxCoderOptions::clear_has_use_corners() {
  _has_bits_[0] &= ~0x00000008u;
}
void BoxCoderOptions::clear_use_corners() {
  use_corners_ = true;
  clear_has_use_corners();
}
bool BoxCoderOptions::use_corners() const {
  // @@protoc_insertion_point(field_get:org_tensorflow_demo.BoxCoderOptions.use_corners)
  return use_corners_;
}
void BoxCoderOptions::set_use_corners(bool value) {
  set_has_use_corners();
  use_corners_ = value;
  // @@protoc_insertion_point(field_set:org_tensorflow_demo.BoxCoderOptions.use_corners)
}

// optional bool use_width_height = 3 [default = false];
bool BoxCoderOptions::has_use_width_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BoxCoderOptions::set_has_use_width_height() {
  _has_bits_[0] |= 0x00000001u;
}
void BoxCoderOptions::clear_has_use_width_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void BoxCoderOptions::clear_use_width_height() {
  use_width_height_ = false;
  clear_has_use_width_height();
}
bool BoxCoderOptions::use_width_height() const {
  // @@protoc_insertion_point(field_get:org_tensorflow_demo.BoxCoderOptions.use_width_height)
  return use_width_height_;
}
void BoxCoderOptions::set_use_width_height(bool value) {
  set_has_use_width_height();
  use_width_height_ = value;
  // @@protoc_insertion_point(field_set:org_tensorflow_demo.BoxCoderOptions.use_width_height)
}

// optional bool use_center = 4 [default = false];
bool BoxCoderOptions::has_use_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BoxCoderOptions::set_has_use_center() {
  _has_bits_[0] |= 0x00000002u;
}
void BoxCoderOptions::clear_has_use_center() {
  _has_bits_[0] &= ~0x00000002u;
}
void BoxCoderOptions::clear_use_center() {
  use_center_ = false;
  clear_has_use_center();
}
bool BoxCoderOptions::use_center() const {
  // @@protoc_insertion_point(field_get:org_tensorflow_demo.BoxCoderOptions.use_center)
  return use_center_;
}
void BoxCoderOptions::set_use_center(bool value) {
  set_has_use_center();
  use_center_ = value;
  // @@protoc_insertion_point(field_set:org_tensorflow_demo.BoxCoderOptions.use_center)
}

// optional bool use_area = 5 [default = false];
bool BoxCoderOptions::has_use_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BoxCoderOptions::set_has_use_area() {
  _has_bits_[0] |= 0x00000004u;
}
void BoxCoderOptions::clear_has_use_area() {
  _has_bits_[0] &= ~0x00000004u;
}
void BoxCoderOptions::clear_use_area() {
  use_area_ = false;
  clear_has_use_area();
}
bool BoxCoderOptions::use_area() const {
  // @@protoc_insertion_point(field_get:org_tensorflow_demo.BoxCoderOptions.use_area)
  return use_area_;
}
void BoxCoderOptions::set_use_area(bool value) {
  set_has_use_area();
  use_area_ = value;
  // @@protoc_insertion_point(field_set:org_tensorflow_demo.BoxCoderOptions.use_area)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiBoxCoderOptions::kBoxCoderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiBoxCoderOptions::MultiBoxCoderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:org_tensorflow_demo.MultiBoxCoderOptions)
}
MultiBoxCoderOptions::MultiBoxCoderOptions(const MultiBoxCoderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      box_coder_(from.box_coder_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:org_tensorflow_demo.MultiBoxCoderOptions)
}

void MultiBoxCoderOptions::SharedCtor() {
  _cached_size_ = 0;
}

MultiBoxCoderOptions::~MultiBoxCoderOptions() {
  // @@protoc_insertion_point(destructor:org_tensorflow_demo.MultiBoxCoderOptions)
  SharedDtor();
}

void MultiBoxCoderOptions::SharedDtor() {
}

void MultiBoxCoderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiBoxCoderOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2].descriptor;
}

const MultiBoxCoderOptions& MultiBoxCoderOptions::default_instance() {
  protobuf_InitDefaults_tensorflow_2fexamples_2fandroid_2fproto_2fbox_5fcoder_2eproto();
  return *internal_default_instance();
}

MultiBoxCoderOptions* MultiBoxCoderOptions::New(::google::protobuf::Arena* arena) const {
  MultiBoxCoderOptions* n = new MultiBoxCoderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiBoxCoderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:org_tensorflow_demo.MultiBoxCoderOptions)
  box_coder_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiBoxCoderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org_tensorflow_demo.MultiBoxCoderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .org_tensorflow_demo.BoxCoderOptions box_coder = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_box_coder()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org_tensorflow_demo.MultiBoxCoderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org_tensorflow_demo.MultiBoxCoderOptions)
  return false;
#undef DO_
}

void MultiBoxCoderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org_tensorflow_demo.MultiBoxCoderOptions)
  // repeated .org_tensorflow_demo.BoxCoderOptions box_coder = 1;
  for (unsigned int i = 0, n = this->box_coder_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->box_coder(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org_tensorflow_demo.MultiBoxCoderOptions)
}

::google::protobuf::uint8* MultiBoxCoderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org_tensorflow_demo.MultiBoxCoderOptions)
  // repeated .org_tensorflow_demo.BoxCoderOptions box_coder = 1;
  for (unsigned int i = 0, n = this->box_coder_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->box_coder(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org_tensorflow_demo.MultiBoxCoderOptions)
  return target;
}

size_t MultiBoxCoderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org_tensorflow_demo.MultiBoxCoderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .org_tensorflow_demo.BoxCoderOptions box_coder = 1;
  {
    unsigned int count = this->box_coder_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box_coder(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiBoxCoderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org_tensorflow_demo.MultiBoxCoderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiBoxCoderOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiBoxCoderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org_tensorflow_demo.MultiBoxCoderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org_tensorflow_demo.MultiBoxCoderOptions)
    MergeFrom(*source);
  }
}

void MultiBoxCoderOptions::MergeFrom(const MultiBoxCoderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org_tensorflow_demo.MultiBoxCoderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  box_coder_.MergeFrom(from.box_coder_);
}

void MultiBoxCoderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org_tensorflow_demo.MultiBoxCoderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiBoxCoderOptions::CopyFrom(const MultiBoxCoderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org_tensorflow_demo.MultiBoxCoderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiBoxCoderOptions::IsInitialized() const {
  return true;
}

void MultiBoxCoderOptions::Swap(MultiBoxCoderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiBoxCoderOptions::InternalSwap(MultiBoxCoderOptions* other) {
  box_coder_.UnsafeArenaSwap(&other->box_coder_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiBoxCoderOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiBoxCoderOptions

// repeated .org_tensorflow_demo.BoxCoderOptions box_coder = 1;
int MultiBoxCoderOptions::box_coder_size() const {
  return box_coder_.size();
}
void MultiBoxCoderOptions::clear_box_coder() {
  box_coder_.Clear();
}
const ::org_tensorflow_demo::BoxCoderOptions& MultiBoxCoderOptions::box_coder(int index) const {
  // @@protoc_insertion_point(field_get:org_tensorflow_demo.MultiBoxCoderOptions.box_coder)
  return box_coder_.Get(index);
}
::org_tensorflow_demo::BoxCoderOptions* MultiBoxCoderOptions::mutable_box_coder(int index) {
  // @@protoc_insertion_point(field_mutable:org_tensorflow_demo.MultiBoxCoderOptions.box_coder)
  return box_coder_.Mutable(index);
}
::org_tensorflow_demo::BoxCoderOptions* MultiBoxCoderOptions::add_box_coder() {
  // @@protoc_insertion_point(field_add:org_tensorflow_demo.MultiBoxCoderOptions.box_coder)
  return box_coder_.Add();
}
::google::protobuf::RepeatedPtrField< ::org_tensorflow_demo::BoxCoderOptions >*
MultiBoxCoderOptions::mutable_box_coder() {
  // @@protoc_insertion_point(field_mutable_list:org_tensorflow_demo.MultiBoxCoderOptions.box_coder)
  return &box_coder_;
}
const ::google::protobuf::RepeatedPtrField< ::org_tensorflow_demo::BoxCoderOptions >&
MultiBoxCoderOptions::box_coder() const {
  // @@protoc_insertion_point(field_list:org_tensorflow_demo.MultiBoxCoderOptions.box_coder)
  return box_coder_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace org_tensorflow_demo

// @@protoc_insertion_point(global_scope)
